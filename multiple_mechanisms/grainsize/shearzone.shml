<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Initial TF model to reproduce Matlab shearzone models in Homburg 20?? Thesis</string_value>
  </description>
  <simulations>
    <simulation name="Shearzone">
      <input_file>
        <string_value lines="1" type="filename">shearzone.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="L">
          <values>
            <string_value lines="1">1000.</string_value>
          </values>
          <comment>system size  \Omega = [-L/2,L/2],  size in m</comment>
        </parameter>
        <parameter name="h">
          <values>
            <string_value lines="1">1.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::ShearzoneWidth/type::Constant/rank::Scalar/value::WholeMesh/constant",float(h)/float(L))</string_value>
            <single_build/>
          </update>
          <comment>dimensional width of shear-zone in m</comment>
        </parameter>
        <parameter name="N">
          <values>
            <string_value lines="1">40</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
llam = float(h)/float(L)*2/float(N)

libspud.set_option("/system::shearzone/coefficient::ShearzoneTaper/type::Constant/rank::Scalar/value::WholeMesh/constant",float(llam))</string_value>
            <single_build/>
          </update>
          <comment>Number of cells across the shear_zone...sets the mesh resolution.</comment>
        </parameter>
        <parameter name="edot0">
          <values>
            <string_value lines="1">1.e-14 1.e-13 1.e-12 1.e-11</string_value>
            <comment>1.e-14 1.e-13 1.e-12 1.e-11 1.e-10 1.e-9 1.e-8
1.e-14 1.e-13 1.e-12</comment>
          </values>
          <comment>boundary driven strain rate ( s^-1)  such that V0 = 2*edot0*L</comment>
        </parameter>
        <parameter name="T0">
          <values>
            <string_value lines="1">650.</string_value>
          </values>
          <comment>Initial Temperature (in C)</comment>
        </parameter>
        <parameter name="G">
          <values>
            <string_value lines="1">5.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

# Set some Dimensionless numbers and insert in tfml file

# Fixed Problem parameters
kappa = 1.e-6 # thermal diffusivity m^2/s
rho = 3300.   # Density of dunite kg/m^3
cp  = 800.   # Heat capacity J kg^{-1} K^-1

# derived quantities
T0_K = float(T0) + 273.
V0 = 2.*float(edot0)*float(L) # boundary velocity scale
invPe = min(kappa/V0/float(L),1.e3) # inverse Pe number
Di = float(G)*1.e6/float(T0_K)/rho/cp # dissipation number (note G in MPa)

s_per_year = 3600.*24.*365.25

print
print '**************** Scaling Parameters **********'
print 'Scale velocity V0=',V0*s_per_year, 'm/yr'
print '            1/Pe=',invPe
print 'Dissipation # Di=',Di
print '************************************************'
print

# set tfml options
libspud.set_option("/system::shearzone/coefficient::invPe/type::Constant/rank::Scalar/value::WholeMesh/constant",invPe)
libspud.set_option("/system::shearzone/coefficient::DissipationNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",Di)</string_value>
            <single_build/>
          </update>
          <comment>Elastic Shear Modulus (in MPa)  also used as a reference stress</comment>
        </parameter>
        <parameter name="R">
          <values>
            <string_value lines="1">0.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::CoolingRate/type::Constant/rank::Scalar/value::WholeMesh/constant",float(R))</string_value>
            <single_build/>
          </update>
          <comment>Dimensionless thermal relaxation rate  R = r/edot0  gives cooling rate relateive to background strain rate.</comment>
        </parameter>
        <parameter name="d0">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <comment>reference grain size in microns</comment>
        </parameter>
        <parameter name="dsz">
          <values>
            <string_value lines="1">100.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::ShearzoneGrainsize/type::Constant/rank::Scalar/value::WholeMesh/constant",float(dsz)/float(d0))</string_value>
            <single_build/>
          </update>
          <comment>grain-size in shear zone in microns</comment>
        </parameter>
        <parameter name="mechanism">
          <values>
            <string_value lines="1">[ diff disl disGBS peierls ]</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

R = 8.314e-3 # Gas constant  
T0_K = float(T0) + 273.

mechs = mechanism.split()
print mechanism
if 'diff' in mechs:
  A = 1.5e9    # MPa^{-1} microns^{3} s^{-1}
  n = 1.       # stress exponent
  m = -3.       # grain-size exponent
  Q = 375.     # Activation energy
  Astar = A/float(edot0)*float(G)**n*float(d0)**m
  Tstar = Q/R/float(T0_K)
  print 'using Diffusion creep: A* = {0}, T* = {1}'.format(Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::Adiff/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstardiff/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
if 'disl' in mechs: 
  A = 1.1e5    # MPa^{-3.5} microns^{0} s^{-1}
  n = 3.5      # stress exponent
  m = 0.       # grain-size exponent
  Q = 530.     # Activation energy
  Astar = A/float(edot0)*float(G)**n*float(d0)**m
  Tstar = Q/R/float(T0_K)
  print 'using Dislocation  creep: A* = {0}, T* = {1}'.format(Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::Adisl/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstardisl/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
if 'disGBS' in mechs:
  A = 6500.    # MPa^{-3.5} microns^{2} s^{-1}
  n = 3.5      # stress exponent
  m = -2.      # grain-size exponent
  Q = 400.     # Activation energy
  Astar = A/float(edot0)*float(G)**n*float(d0)**m
  Tstar = Q/R/float(T0_K)
  print 'using Dislocation GBS creep: A* = {0}, T* = {1}'.format(Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::AdisGBS/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::TstardisGBS/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
if 'peierls' in mechs:
  A = 5.7e11    #  s^{-1}
  B = 1./8.5e3      # stress constant
  Q = 540.     # Activation energy
  Astar = A/float(edot0)
  Bstar = float(G)*B
  Tstar = Q/R/float(T0_K)
  print 'using Peierls low-T plasticity : A* = {0}, B* = {1}, T* = {2}'.format(Astar,Bstar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::Apeierls/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Bpeierls/type::Constant/rank::Scalar/value::WholeMesh/constant",Bstar)
  libspud.set_option("/system::shearzone/coefficient::Tstarpeierls/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)</string_value>
            <single_build/>
          </update>
          <comment>string describing creep mechanisms
Current options are diff, disl, disGBS and peierls creep</comment>
        </parameter>
        <parameter name="growthmodel">
          <values>
            <string_value lines="1">none</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

R = 8.314e-3 # Gas constant  
T0_K = float(T0) + 273.

if 'p2' in growthmodel:
  A = 1.8e8    # Pre-exponential
  p = 2.       # grainsize  exponent
  Q = 300.     # Activation energy
  Astar = A/float(edot0)/p*float(d0)**(-p)
  Tstar = Q/R/float(T0_K)
  print 'using K&amp;H p2 model :p={0}, A* = {1}, T* = {2}'.format(p,Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::A_d/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstard/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
  libspud.set_option("/system::shearzone/coefficient::pd/type::Constant/rank::Scalar/value::WholeMesh/constant",(1.-p))
elif 'p3' in growthmodel:
  A = 1.5e13    # Pre-exponential (microns^p)
  p = 3.       # grain-growth exponent
  Q = 350.     # Activation energy
  Astar = A/float(edot0)/p*float(d0)**(-p)
  Tstar = Q/R/float(T0_K)
  print 'using Janelles p3 model :p={0}, A* = {1}, T* = {2}'.format(p,Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::A_d/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstard/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
  libspud.set_option("/system::shearzone/coefficient::pd/type::Constant/rank::Scalar/value::WholeMesh/constant",(1.-p))
elif 'none' in growthmodel:
  A = 0.    # Pre-exponential
  p = 1.       # stress exponent
  Q = 0.     # Activation energy
  Astar = A/float(edot0)*p*float(d0)**(-p)
  Tstar = Q/R/float(T0_K)
  print 'No normal grain-growth model :p={0}, A* = {1}, T* = {2}'.format(p,Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::A_d/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstard/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
  libspud.set_option("/system::shearzone/coefficient::pd/type::Constant/rank::Scalar/value::WholeMesh/constant",(1.-p))
else:
  print 'Error:  no growthmodel {}'.format(growthmodel)
  </string_value>
            <single_build/>
          </update>
          <comment>string describing grain-growth model 
Current options are p2, p3 and none</comment>
        </parameter>
        <parameter name="reductionmodel">
          <values>
            <string_value lines="1">pz</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

if reductionmodel == 'hp':
  print 'Using Hall and Parmentier Model'
  ipiezometer = 0.
elif reductionmodel == 'pz':
  print 'Using Piezometer equilibration'
  ipiezometer = 1.
else:
  print 'Error:  no reduction model {}'.format(reductionmodel)
  
libspud.set_option("/system::shearzone/coefficient::UsePiezometer/type::Constant/rank::Scalar/value::WholeMesh/constant",ipiezometer)

# set coefficients for the piezometer
A = 1.5e4/float(d0)*float(G)**(-1.3)
print 'A_Piezometer = ',A
libspud.set_option("/system::shearzone/coefficient::A_piezometer/type::Constant/rank::Scalar/value::WholeMesh/constant",A)</string_value>
            <single_build/>
          </update>
          <comment>string describing grain-reduction model 
Current options are hp,pz

where hp is hall and parmentier
	   pz is twiss piezometer</comment>
        </parameter>
        <parameter name="lambda_d">
          <values>
            <string_value lines="1">10.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::lambda_d/type::Constant/rank::Scalar/value::WholeMesh/constant",float(lambda_d))</string_value>
            <single_build/>
          </update>
          <comment>Weight in grain-size reduction term

setting \lambda_d =0 turns off all grain-size reduction terms</comment>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">../../mesh/mesh_template.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="L"/>
            <parameter name="h"/>
            <parameter name="N">
              <update>
                <string_value lines="20" type="code" language="python">from string import Template as template

h_on_L = float(h)/float(L)
cl_min = h_on_L/float(N)

print '******************* mesh parameters ******************'
print ' shear zone width h/L= ',h_on_L
print ' minimum resolution h_min =', cl_min
print '******************************************************'
input_file = template(input_file).safe_substitute({'cl_min':cl_min,'h_on_L':h_on_L})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="Mesh">
              <string>
                <string_value lines="1" type="filename">mesh.xml.gz</string_value>
              </string>
            </filenames>
          </required_output>
          <commands>
            <command name="gmsh">
              <string_value lines="1">gmsh -1 -v 0 mesh_template.geo</string_value>
            </command>
            <command name="convert">
              <string_value lines="1">dolfin-convert mesh_template.msh mesh.xml</string_value>
            </command>
            <command name="compress">
              <string_value lines="1">gzip mesh.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="tau_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
tau_max = stat["shearzone"]["Stress"]["max"]</string_value>
        </variable>
        <variable name="edot_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
edot_max = stat["total_strainrate"]["strainrate"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="T_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
T_min = stat["shearzone"]["Temperature"]["min"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="T_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
T_max = stat["shearzone"]["Temperature"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="time">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
time = stat["ElapsedTime"]["value"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="d_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
d_max = stat["shearzone"]["Grainsize"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="d_min">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
d_min = stat["shearzone"]["Grainsize"]["min"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="edot_diff_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
edot_diff_max = stat["edot_diffp"]["edotdiffp"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="edot_disl_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
edot_disl_max = stat["edot_dislp"]["edotdislp"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="edot_disGBS_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
edot_disGBS_max = stat["edot_disGBSp"]["edotdisGBSp"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="edot_peierls_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
edot_peierls_max = stat["edot_peierlsp"]["edotpeierlsp"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="PlotStress">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']
G = float(time.parameters['G'][0])

# get parameters for title string and plot label
L = time.parameters['L'][0]
h = time.parameters['h'][0]
R = time.parameters['R'][0]
gm = time.parameters['growthmodel'][0]
rm = time.parameters['reductionmodel'][0]
lambd = time.parameters['lambda_d'][0]
label = 'L={}_h={}_R={}_[{},{}]_l={}_'.format(L,h,R,gm,rm,lambd)
title = 'Stress: ($L=${}, $h=${}, $R=${}, $\dot d$=[{},{}], $\lambda_d=${})'.format(L,h,R,gm,rm,lambd)

pl.figure()
color = iter(['r','g','b','k','y','c','m'])
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  tau = G*tau_max[slice]
  print tau[:10]
  c = next(color)
  pl.plot(t,tau,'-'+c,label='$\dot\epsilon_0=${0}'.format(edot))
  pl.hold(True)

pl.grid()
pl.ylim(ymin = 0., ymax=0.05*G)
lgd=pl.legend(loc='center left', bbox_to_anchor=(1, 0.5),fontsize='small')
pl.xlabel('Background Strain (non-dim time)')
pl.ylabel('Shear Stress (MPa)')
pl.title(title)
pl.savefig('Stress_{}.pdf'.format(label),bbox_extra_artists=(lgd,), bbox_inches='tight')</string_value>
    </test>
    <test name="PlotT">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']
T0 = float(time.parameters['T0'][0])
T0_K = T0 + 273.

# get parameters for title string and plot label
L = time.parameters['L'][0]
h = time.parameters['h'][0]
R = time.parameters['R'][0]
gm = time.parameters['growthmodel'][0]
rm = time.parameters['reductionmodel'][0]
lambd = time.parameters['lambda_d'][0]
label = 'L={}_h={}_R={}_[{},{}]_l={}_'.format(L,h,R,gm,rm,lambd)
title = 'Temperature: ($L=${}, $h=${}, $R=${}, $\dot d$=[{},{}], $\lambda_d=${})'.format(L,h,R,gm,rm,lambd)


pl.figure()
color = iter(['r','g','b','k','y','c','m'])
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  Tmax = T0_K*T_max[slice] - 273.
  Tmin = T0_K*T_min[slice] - 273.
  c = next(color)
  pl.plot(t,Tmax,'-'+c,label='Tmax:$\dot\epsilon_0$={0}'.format(edot))
  pl.hold(True)
  pl.plot(t,Tmin,'--'+c,label='Tmin:$\dot\epsilon_0$={0}'.format(edot))
  
pl.grid()
pl.ylim(ymin=0.99*T0_K - 273.,ymax=1.1*T0_K -273.)
lgd=pl.legend(loc='center left', bbox_to_anchor=(1, 0.5),fontsize='small')
pl.xlabel('Background Strain (non-dim time)')
pl.ylabel('Temperature ($^\circ$C)')
pl.title(title)
pl.savefig('Temperature_{}.pdf'.format(label),bbox_extra_artists=(lgd,), bbox_inches='tight')</string_value>
    </test>
    <test name="PlotStrainRate">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']

# get parameters for title string and plot label
L = time.parameters['L'][0]
h = time.parameters['h'][0]
R = time.parameters['R'][0]
gm = time.parameters['growthmodel'][0]
rm = time.parameters['reductionmodel'][0]
lambd = time.parameters['lambda_d'][0]
label = 'L={}_h={}_R={}_[{},{}]_l={}_'.format(L,h,R,gm,rm,lambd)
title = 'Strain Rate: ($L=${}, $h=${}, $R=${}, $\dot d$=[{},{}], $\lambda_d=${})'.format(L,h,R,gm,rm,lambd)

pl.figure()
color = iter(['r','g','b','k','y','c','m'])
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  edotmax = edot_max[slice]
  c = next(color)
  pl.semilogy(t,edotmax,'-'+c,label='$\dot\epsilon_0=${0}'.format(edot))
  pl.hold(True)

pl.grid()
pl.ylim(ymin=.01,ymax=1.e6)
lgd=pl.legend(loc='center left', bbox_to_anchor=(1, 0.5),fontsize='small')
pl.xlabel('Background Strain (non-dim Time)')
pl.ylabel('Maximum Strain Rate (non-dim)')
pl.title(title)
pl.savefig('StrainRate_{}.pdf'.format(label),bbox_extra_artists=(lgd,), bbox_inches='tight')</string_value>
    </test>
    <test name="PlotGrainSize">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']
d0 = float(time.parameters['d0'][0])
G = float(time.parameters['G'][0])

# get parameters for title string and plot label
L = time.parameters['L'][0]
h = time.parameters['h'][0]
R = time.parameters['R'][0]
gm = time.parameters['growthmodel'][0]
rm = time.parameters['reductionmodel'][0]
lambd = time.parameters['lambda_d'][0]
label = 'L={}_h={}_R={}_[{},{}]_l={}_'.format(L,h,R,gm,rm,lambd)
title = 'Grain Size: ($L=${}, $h=${}, $R=${}, $\dot d$=[{},{}], $\lambda_d=${})'.format(L,h,R,gm,rm,lambd) 

pl.figure()
color = iter(['r','g','b','k','y','c','m'])
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  dmax = d0*d_max[slice]
  dmin = d0*d_min[slice] 
  tau = G*tau_max[slice]
  d_ss = 1.5e4*tau**-1.3
  c = next(color)
  pl.semilogy(t,dmax,'-'+c,t,dmin,'--'+c,label='$\dot\epsilon_0=${0}'.format(edot))
  pl.hold(True)
  pl.semilogy(t,d_ss,':'+c,label='$\dot\epsilon_0=${0}, ss'.format(edot))


pl.grid()
pl.ylim(ymin=.01,ymax=1.e5)
lgd=pl.legend(loc='center left', bbox_to_anchor=(1, 0.5),fontsize='small')
pl.xlabel('Background Strain (non-dim Time)')
pl.ylabel('Max/Min Grain-size ($\mu m$)')
pl.title(title)
pl.savefig('GrainSize_{}.pdf'.format(label),bbox_extra_artists=(lgd,), bbox_inches='tight')</string_value>
    </test>
    <test name="PlotMechanisms">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']

# get parameters for title string and plot label
L = time.parameters['L'][0]
h = time.parameters['h'][0]
R = time.parameters['R'][0]
gm = time.parameters['growthmodel'][0]
rm = time.parameters['reductionmodel'][0]
lambd = time.parameters['lambda_d'][0]
label = 'L={}_h={}_R={}_[{},{}]_l={}_'.format(L,h,R,gm,rm,lambd)
title = 'Mechanisms: ($L=${}, $h=${}, $R=${}, $\dot d$=[{},{}], $\lambda_d=${})'.format(L,h,R,gm,rm,lambd) 

pl.figure()
color = iter(['r','g','b','k','y','c','m'])
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  edot_diff = edot_diff_max[slice]
  edot_disl = edot_disl_max[slice]
  edot_disGBS = edot_disGBS_max[slice]
  edot_peierls = edot_peierls_max[slice]
  c = next(color)
  pl.semilogy(t,edot_diff,'-'+c,label='$\dot\epsilon_0=${0}, diff'.format(edot))
  pl.semilogy(t,edot_disl,'--'+c,label='$\dot\epsilon_0=${0}, disl'.format(edot))
  pl.semilogy(t,edot_disGBS,'-.'+c,label='$\dot\epsilon_0=${0}, disGBS'.format(edot))
  pl.semilogy(t,edot_peierls,':'+c,label='$\dot\epsilon_0=${0}, peierls'.format(edot))
  pl.hold(True)

pl.grid()
pl.ylim(ymax=1.e6)
lgd=pl.legend(loc='center left', bbox_to_anchor=(1, 0.5),fontsize='small')
pl.xlabel('Background Strain (non-dim Time)')
pl.ylabel('Maximum Strain Rate (non-dim)')
pl.title(title)
pl.savefig('Mechanisms_{}.pdf'.format(label),bbox_extra_artists=(lgd,), bbox_inches='tight')</string_value>
    </test>
  </tests>
</harness_options>
