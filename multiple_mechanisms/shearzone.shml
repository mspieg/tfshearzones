<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Initial TF model to reproduce Matlab shearzone models in Homburg 20?? Thesis</string_value>
  </description>
  <simulations>
    <simulation name="Shearzone">
      <input_file>
        <string_value lines="1" type="filename">shearzone.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="L">
          <values>
            <string_value lines="1">50.</string_value>
          </values>
          <comment>system size  \Omega = [-L/2,L/2],  size in m</comment>
        </parameter>
        <parameter name="h">
          <values>
            <string_value lines="1">0.05</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::ShearzoneWidth/type::Constant/rank::Scalar/value::WholeMesh/constant",float(h)/float(L))</string_value>
            <single_build/>
          </update>
          <comment>dimensional width of shear-zone in m</comment>
        </parameter>
        <parameter name="N">
          <values>
            <string_value lines="1">20</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
llam = float(h)/float(L)*2/float(N)

libspud.set_option("/system::shearzone/coefficient::ShearzoneTaper/type::Constant/rank::Scalar/value::WholeMesh/constant",float(llam))</string_value>
            <single_build/>
          </update>
          <comment>Number of cells across the shear_zone...sets the mesh resolution.</comment>
        </parameter>
        <parameter name="edot0">
          <values>
            <string_value lines="1">6.9e-12 </string_value>
            <comment>6.2e-12 6.4e-12 6.6e-12 6.8e-12 6.9e12 6.95e12
5.e-12 6.e-12 7.e-12 8.e-12 9.e-12


8.e-12 9.e-12 1.e-11 1.05e-11 1.0525e-11 1.055e-11 1.0575e-11 1.06e-11 1.1e-11 1.2e-11</comment>
          </values>
          <comment>boundary driven strain rate ( s^-1)  such that V0 = 2*edot0*L</comment>
        </parameter>
        <parameter name="T0">
          <values>
            <string_value lines="1">650.</string_value>
          </values>
          <comment>Initial Temperature (in C)</comment>
        </parameter>
        <parameter name="G">
          <values>
            <string_value lines="1">5.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

# Set some Dimensionless numbers and insert in tfml file

# Fixed Problem parameters
kappa = 1.e-6 # thermal diffusivity m^2/s
rho = 3300.   # Density of dunite kg/m^3
cp  = 800.   # Heat capacity J kg^{-1} K^-1

# derived quantities
T0_K = float(T0) + 273.
V0 = 2.*float(edot0)*float(L) # boundary velocity scale
invPe = min(kappa/V0/float(L),1.e3) # inverse Pe number
Di = float(G)*1.e6/float(T0_K)/rho/cp # dissipation number (note G in MPa)

s_per_year = 3600.*24.*365.25

print
print '**************** Scaling Parameters **********'
print 'Scale velocity V0=',V0*s_per_year, 'm/yr'
print '            1/Pe=',invPe
print 'Dissipation # Di=',Di
print '************************************************'
print

# set tfml options
libspud.set_option("/system::shearzone/coefficient::invPe/type::Constant/rank::Scalar/value::WholeMesh/constant",invPe)
libspud.set_option("/system::shearzone/coefficient::DissipationNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",Di)</string_value>
            <single_build/>
          </update>
          <comment>Elastic Shear Modulus (in MPa)  also used as a reference stress</comment>
        </parameter>
        <parameter name="R">
          <values>
            <string_value lines="1">0.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::CoolingRate/type::Constant/rank::Scalar/value::WholeMesh/constant",float(R))</string_value>
            <single_build/>
          </update>
          <comment>Dimensionless thermal relaxation rate  R = r/edot0  gives cooling rate relateive to background strain rate.</comment>
        </parameter>
        <parameter name="d0">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <comment>reference grain size in microns</comment>
        </parameter>
        <parameter name="dsz">
          <values>
            <string_value lines="1">50.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::ShearzoneGrainsize/type::Constant/rank::Scalar/value::WholeMesh/constant",float(dsz)/float(d0))</string_value>
            <single_build/>
          </update>
          <comment>grain-size in shear zone in microns</comment>
        </parameter>
        <parameter name="mechanism">
          <values>
            <string_value lines="1">[ diff disl disGBS ]</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

R = 8.314e-3 # Gas constant  
T0_K = float(T0) + 273.

mechs = mechanism.split()
print mechanism
if 'diff' in mechs:
  A = 1.5e9    # MPa^{-1} microns^{3} s^{-1}
  n = 1.       # stress exponent
  m = -3.       # grain-size exponent
  Q = 375.     # Activation energy
  Astar = A/float(edot0)*float(G)**n*float(d0)**m
  Tstar = Q/R/float(T0_K)
  print 'using Diffusion creep: A* = {0}, T* = {1}'.format(Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::Adiff/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstardiff/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
if 'disl' in mechs: 
  A = 1.1e5    # MPa^{-3.5} microns^{0} s^{-1}
  n = 3.5      # stress exponent
  m = 0.       # grain-size exponent
  Q = 530.     # Activation energy
  Astar = A/float(edot0)*float(G)**n*float(d0)**m
  Tstar = Q/R/float(T0_K)
  print 'using Dislocation  creep: A* = {0}, T* = {1}'.format(Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::Adisl/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::Tstardisl/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
if 'disGBS' in mechs:
  A = 6500.    # MPa^{-3.5} microns^{2} s^{-1}
  n = 3.5      # stress exponent
  m = -2.      # grain-size exponent
  Q = 400.     # Activation energy
  Astar = A/float(edot0)*float(G)**n*float(d0)**m
  Tstar = Q/R/float(T0_K)
  print 'using Dislocation GBS creep: A* = {0}, T* = {1}'.format(Astar,Tstar)
  libspud.set_option("/system::shearzone/coefficient::AdisGBS/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
  libspud.set_option("/system::shearzone/coefficient::TstardisGBS/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)
  
  </string_value>
            <single_build/>
          </update>
          <comment>string describing creep mechanisms
Current options are diff, disl, disGBS creep</comment>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">../mesh/mesh_template.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="L"/>
            <parameter name="h"/>
            <parameter name="N">
              <update>
                <string_value lines="20" type="code" language="python">from string import Template as template

h_on_L = float(h)/float(L)
cl_min = h_on_L/float(N)

print '******************* mesh parameters ******************'
print ' shear zone width h/L= ',h_on_L
print ' minimum resolution h_min =', cl_min
print '******************************************************'
input_file = template(input_file).safe_substitute({'cl_min':cl_min,'h_on_L':h_on_L})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="Mesh">
              <string>
                <string_value lines="1" type="filename">mesh.xml.gz</string_value>
              </string>
            </filenames>
          </required_output>
          <commands>
            <command name="gmsh">
              <string_value lines="1">gmsh -1 -v 0 mesh_template.geo</string_value>
            </command>
            <command name="convert">
              <string_value lines="1">dolfin-convert mesh_template.msh mesh.xml</string_value>
            </command>
            <command name="compress">
              <string_value lines="1">gzip mesh.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
      <variables>
        <variable name="tau_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
tau_max = stat["shearzone"]["Stress"]["max"]</string_value>
        </variable>
        <variable name="edot_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
edot_max = stat["total_strainrate"]["strainrate"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="T_max">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
T_max = stat["shearzone"]["Temperature"]["max"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
        <variable name="time">
          <string_value lines="20" type="code" language="python">from buckettools.statfile import parser
stat = parser("shearzone_out.stat")
time = stat["ElapsedTime"]["value"]</string_value>
          <comment>maximum shear stress</comment>
        </variable>
      </variables>
    </simulation>
  </simulations>
  <tests>
    <test name="PlotStress">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']
G = float(time.parameters['G'][0])
#print time.parameters
print edot0,G

pl.figure()
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  tau = G*tau_max[slice]
  #print t[:10]
  #print tau[:10]
  pl.plot(t,tau,label='$\dot\epsilon_0=${0}'.format(edot))
  pl.hold(True)

pl.grid()
pl.ylim(ymax=0.17*G)
pl.legend(loc='best')
pl.xlabel('Background Strain (non-dim time)')
pl.ylabel('Shear Stress (MPa)')
pl.savefig('Stress.pdf')</string_value>
    </test>
    <test name="PlotT">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']
T0 = float(time.parameters['T0'][0])
T0_K = T0 + 273.

#print time.parameters
print edot0, T0

pl.figure()
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  T = T0_K*T_max[slice] - 273.
  pl.plot(t,T,label='$\dot\epsilon_0$={0}'.format(edot))
  pl.hold(True)

pl.grid()
pl.ylim(ymin=.99*T0_K -273,ymax=1.09*T0_K -273.)
pl.legend(loc='best')
pl.xlabel('Background Strain (non-dim time)')
pl.ylabel('Temperature ($^\circ$C)')
pl.savefig('Temperature.pdf')</string_value>
    </test>
    <test name="PlotStrainRate">
      <string_value lines="20" type="code" language="python">import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as pl

edot0 = time.parameters['edot0']
#print time.parameters
print edot0

pl.figure()
for edot in edot0:
  print edot
  slice = {'edot0':edot}
  t = time[slice]
  edotmax = edot_max[slice]
  #print t[:10]
  #print tau[:10]
  pl.semilogy(t,edotmax,label='$\dot\epsilon_0=${0}'.format(edot))
  pl.hold(True)

pl.grid()
pl.ylim(ymax=1.e4)
pl.legend(loc='best')
pl.xlabel('Background Strain (non-dim Time)')
pl.ylabel('Maximum Strain Rate (non-dim)')
pl.savefig('StrainRate.pdf')</string_value>
    </test>
  </tests>
</harness_options>
