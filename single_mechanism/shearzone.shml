<?xml version='1.0' encoding='utf-8'?>
<harness_options>
  <length>
    <string_value lines="1">medium</string_value>
  </length>
  <owner>
    <string_value lines="1">mspieg</string_value>
  </owner>
  <description>
    <string_value lines="1">Initial TF model to reproduce Matlab shearzone models in Homburg 20?? Thesis</string_value>
  </description>
  <simulations>
    <simulation name="Shearzone">
      <input_file>
        <string_value lines="1" type="filename">shearzone.tfml</string_value>
      </input_file>
      <run_when name="input_changed_or_output_missing"/>
      <parameter_sweep>
        <parameter name="L">
          <values>
            <string_value lines="1">25.</string_value>
          </values>
          <comment>system size  \Omega = [-L,L],  size in m</comment>
        </parameter>
        <parameter name="h">
          <values>
            <string_value lines="1">0.05</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::ShearzoneWidth/type::Constant/rank::Scalar/value::WholeMesh/constant",float(h)/float(L))</string_value>
            <single_build/>
          </update>
          <comment>dimensional width of shear-zone in m</comment>
        </parameter>
        <parameter name="N">
          <values>
            <string_value lines="1">20</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
llam = float(h)/float(L)*2/float(N)

libspud.set_option("/system::shearzone/coefficient::ShearzoneTaper/type::Constant/rank::Scalar/value::WholeMesh/constant",float(llam))</string_value>
            <single_build/>
          </update>
          <comment>Number of cells across the shear_zone...sets the mesh resolution.</comment>
        </parameter>
        <parameter name="edot0">
          <values>
            <string_value lines="1">1.e-12 2e-12 5e-12</string_value>
          </values>
          <comment>boundary driven strain rate ( s^-1)  such that V0 = edot0*L</comment>
        </parameter>
        <parameter name="T0">
          <values>
            <string_value lines="1">923.</string_value>
          </values>
          <comment>Initial Temperature (in K)</comment>
        </parameter>
        <parameter name="G">
          <values>
            <string_value lines="1">5.e4</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud

# Set some Dimensionless numbers and insert in tfml file

# Fixed Problem parameters
kappa = 1.e-6 # thermal diffusivity m^2/s
rho = 3300.   # Density of dunite kg/m^3
cp  = 800.   # Heat capacity J kg^{-1} K^-1

# derived quantities
V0 = float(edot0)*float(L) # boundary velocity
invPe = min(kappa/V0/float(L),1.e3) # inverse Pe number
Di = float(G)*1.e6/float(T0)/rho/cp # dissipation number (note G in MPa)

s_per_year = 3600.*24.*365.25

print
print '**************** Scaling Parameters **********'
print 'Edge velocity V0=',V0*s_per_year, 'm/yr'
print '            1/Pe=',invPe
print 'Dissipation # Di=',Di
print '************************************************'
print

# set tfml options
libspud.set_option("/system::shearzone/coefficient::invPe/type::Constant/rank::Scalar/value::WholeMesh/constant",invPe)
libspud.set_option("/system::shearzone/coefficient::DissipationNumber/type::Constant/rank::Scalar/value::WholeMesh/constant",Di)</string_value>
            <single_build/>
          </update>
          <comment>Elastic Shear Modulus (in MPa)  also used as a reference stress</comment>
        </parameter>
        <parameter name="R">
          <values>
            <string_value lines="1">0.</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::CoolingRate/type::Constant/rank::Scalar/value::WholeMesh/constant",float(R))</string_value>
            <single_build/>
          </update>
          <comment>Dimensionless thermal relaxation rate  R = r/edot0  gives cooling rate relateive to background strain rate.</comment>
        </parameter>
        <parameter name="d0">
          <values>
            <string_value lines="1">1.e4</string_value>
          </values>
          <comment>reference grain size in microns</comment>
        </parameter>
        <parameter name="dsz">
          <values>
            <string_value lines="1">.01</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
libspud.set_option("/system::shearzone/coefficient::ShearzoneGrainsize/type::Constant/rank::Scalar/value::WholeMesh/constant",float(dsz))</string_value>
            <single_build/>
          </update>
          <comment>dimensionless grain-size in shear zone</comment>
        </parameter>
        <parameter name="mechanism">
          <values>
            <string_value lines="1">disGBS</string_value>
          </values>
          <update>
            <string_value lines="20" type="code" language="python">import libspud
if mechanism == 'disGBS':
  A = 6500.    # MPa^{-3.5} microns^{2} s^{-1}
  n = 3.5      # stress exponent
  m = -2.      # grain-size exponent
  Q = 400.     # Activation energy
elif mechanism == 'diff':
  A = 1.5e9    # MPa^{-1} microns^{3} s^{-1}
  n = 1.       # stress exponent
  m = -3.       # grain-size exponent
  Q = 375.     # Activation energy
elif mechanism == 'dis':
  A = 1.1e5    # MPa^{-3.5} microns^{0} s^{-1}
  n = 3.5      # stress exponent
  m = 0.       # grain-size exponent
  Q = 530.     # Activation energy
else:
  print 'Error, no mechanism: {0}'.format(mechanism)

R = 8.314e-3 # Gas constant  
Astar = A/float(edot0)*float(G)**n*float(d0)**m
Tstar = Q/R/float(T0)

libspud.set_option("/system::shearzone/coefficient::A/type::Constant/rank::Scalar/value::WholeMesh/constant",Astar)
libspud.set_option("/system::shearzone/coefficient::n/type::Constant/rank::Scalar/value::WholeMesh/constant",n)
libspud.set_option("/system::shearzone/coefficient::m/type::Constant/rank::Scalar/value::WholeMesh/constant",m)
libspud.set_option("/system::shearzone/coefficient::Tstar/type::Constant/rank::Scalar/value::WholeMesh/constant",Tstar)

print '**************** Mechanism Parameters **********'
print mechanism
print 'A* =',Astar
print 'T* =',Tstar
print '************************************************'</string_value>
            <single_build/>
          </update>
          <comment>string describing creep mechanism
Current options are disGBS, diff, disl creep</comment>
        </parameter>
      </parameter_sweep>
      <dependencies>
        <run name="Mesh">
          <input_file>
            <string_value lines="1" type="filename">../mesh/mesh_template.geo</string_value>
          </input_file>
          <run_when name="input_changed_or_output_missing"/>
          <parameter_sweep>
            <parameter name="L"/>
            <parameter name="h"/>
            <parameter name="N">
              <update>
                <string_value type="code" lines="20" language="python">from string import Template as template

h_on_L = float(h)/float(L)
cl_min = h_on_L/float(N)

print '******************* mesh parameters ******************'
print ' shear zone width h/L= ',h_on_L
print ' minimum resolution h_min =', cl_min
print '******************************************************'
input_file = template(input_file).safe_substitute({'cl_min':cl_min,'h_on_L':h_on_L})</string_value>
              </update>
            </parameter>
          </parameter_sweep>
          <required_output>
            <filenames name="Mesh">
              <string>
                <string_value lines="1" type="filename">mesh.xml.gz</string_value>
              </string>
            </filenames>
          </required_output>
          <commands>
            <command name="gmsh">
              <string_value lines="1">gmsh -1 -v 0 mesh_template.geo</string_value>
            </command>
            <command name="convert">
              <string_value lines="1">dolfin-convert mesh_template.msh mesh.xml</string_value>
            </command>
            <command name="compress">
              <string_value lines="1">gzip mesh.xml</string_value>
            </command>
          </commands>
        </run>
      </dependencies>
    </simulation>
  </simulations>
</harness_options>
